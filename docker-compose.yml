name: root

services:
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n
      - /local-files:/files

  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8npassword}
      - TZ=America/Los_Angeles
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "127.0.0.1:5432:5432"

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    volumes:
      - qdrant_storage:/qdrant/storage

  lightrag:
    image: python:3.11-slim
    restart: always
    depends_on:
      qdrant:
        condition: service_started
    environment:
      # --- Server / runtime ---
      - HOST=0.0.0.0
      - PORT=9621
      - WORKING_DIR=/app/data
      - LOG_LEVEL=${LIGHTRAG_LOG_LEVEL}
      - LIGHTRAG_API_KEY=${LIGHTRAG_API_KEY}
      - MAX_ASYNC=${LIGHTRAG_MAX_ASYNC}
      - MAX_TOKENS=${LIGHTRAG_MAX_TOKENS}
      - MAX_PARALLEL_INSERT=${MAX_PARALLEL_INSERT}
      - EMBEDDING_FUNC_MAX_ASYNC=${EMBEDDING_FUNC_MAX_ASYNC}
      - EMBEDDING_BATCH_NUM=${EMBEDDING_BATCH_NUM}

      # --- Model backends: OpenAI only (per your .env) ---
      - LLM_BINDING=${LLM_BINDING}
      - LLM_MODEL=${LLM_MODEL}
      - LLM_BINDING_HOST=${LLM_BINDING_HOST}
      - LLM_BINDING_API_KEY=${LLM_BINDING_API_KEY}

      - EMBEDDING_BINDING=${EMBEDDING_BINDING}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - EMBEDDING_DIM=${EMBEDDING_DIM}
      - EMBEDDING_BINDING_HOST=${EMBEDDING_BINDING_HOST}
      - EMBEDDING_BINDING_API_KEY=${EMBEDDING_BINDING_API_KEY}

      # (kept for compatibility if the server also checks OPENAI_API_KEY)
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # --- Vector store (Qdrant in the compose network) ---
      - QDRANT_URL=http://qdrant:6333

    command: >
      bash -lc "
      pip install --no-cache-dir 'lightrag-hku[api]' &&
      exec lightrag-server
      "
    volumes:
      - lightrag_data:/app/data

    # Keep it private to the VPS; access via SSH tunnel to http://localhost:9621
    ports:
      - "127.0.0.1:9621:9621"

    # Traefik labels (inactive until you add DNS)
    labels:
      - traefik.enable=true
      - traefik.http.routers.lightrag.rule=Host(`${LR_SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.lightrag.tls=true
      - traefik.http.routers.lightrag.entrypoints=web,websecure
      - traefik.http.routers.lightrag.tls.certresolver=mytlschallenge
      - traefik.http.services.lightrag.loadbalancer.server.port=9621



volumes:
  traefik_data:
    external: true
  n8n_data:
    external: true
  pg_data:
  qdrant_storage:
  lightrag_data:
